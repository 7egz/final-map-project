(function evaluate(require, module, exports, process, setImmediate, global, afterAll, afterEach, beforeAll, beforeEach, describe, it, test, expect, jest, __dirname, __filename) {'use strict';


// Set a name for the current cache
var cacheName = 'v2';

// Default files to always cache
var cacheFiles = ['', '/', 'public/index.html', './App.js',  './config.js', './index.js', './Map.js','./search.js' './App.css'];

global.addEventListener('install', function (e) {
  console.log('ServiceWorker Installed');

  // e.waitUntil Delays the event until the Promise is resolved
  e.waitUntil(

  // Open the cache
  caches.open(cacheName).then(function (cache) {

    // Add all the default files to the cache
    console.log('ServiceWorker Caching cacheFiles');
    return cache.addAll(cacheFiles);
  }));
});

global.addEventListener('activate', function (e) {
  console.log('ServiceWorker Activated');

  e.waitUntil(

  // Get all the cache keys
  caches.keys().then(function (cacheNames) {
    return Promise.all(cacheNames.map(function (thisCacheName) {

      // If a cached item is saved under a previous cacheName
      if (thisCacheName !== cacheName) {

        // Delete that cached file
        console.log('ServiceWorker Removing Cached Files from Cache - ', thisCacheName);
        return caches.delete(thisCacheName);
      }
    }));
  }));
});

global.addEventListener('fetch', function (e) {
  console.log('ServiceWorker Fetch', e.request.url);

  // e.respondWidth Responds to the fetch event
  e.respondWith(

  // Check in cache for the request being made
  caches.match(e.request).then(function (response) {

    // If the request is in the cache
    if (response) {
      console.log("ServiceWorker Found in Cache", e.request.url, response);
      // Return the cached version
      return response;
    }

    // If the request is NOT in the cache, fetch and cache

    var clonedRequests = e.request.clone();
    return fetch(clonedRequests).then(function (response) {

      if (!response) {
        console.log("ServiceWorker No response from fetch ");
        return response;
      }

      var clonedResponses = response.clone();

      //  Open the cache
      caches.open(cacheName).then(function (cache) {

        // Put the fetched response in the cache
        cache.put(e.request, clonedResponses);
        console.log('ServiceWorker New Data Cached', e.request.url);

        // Return the response
        return response;
      });
    });
  }));
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi9zcmMvcmVnaXN0ZXJTZXJ2aWNlV29ya2VyLmpzIl0sIm5hbWVzIjpbImNhY2hlTmFtZSIsImNhY2hlRmlsZXMiLCJnbG9iYWwiLCJhZGRFdmVudExpc3RlbmVyIiwiZSIsImNvbnNvbGUiLCJsb2ciLCJ3YWl0VW50aWwiLCJjYWNoZXMiLCJvcGVuIiwidGhlbiIsImNhY2hlIiwiYWRkQWxsIiwia2V5cyIsImNhY2hlTmFtZXMiLCJQcm9taXNlIiwiYWxsIiwibWFwIiwidGhpc0NhY2hlTmFtZSIsImRlbGV0ZSIsInJlcXVlc3QiLCJ1cmwiLCJyZXNwb25kV2l0aCIsIm1hdGNoIiwicmVzcG9uc2UiLCJjbG9uZWRSZXF1ZXN0cyIsImNsb25lIiwiZmV0Y2giLCJjbG9uZWRSZXNwb25zZXMiLCJwdXQiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF5R0U7O0FBS0Y7QUFDQTtBQUNBLElBQUlBLFlBQVksSUFBaEI7O0FBRUE7QUFDQSxJQUFJQyxhQUFhLENBQ2hCLEVBRGdCLEVBRWpCLEdBRmlCLEVBR2pCLG1CQUhpQixFQUlqQixVQUppQixFQUtqQixXQUxpQixFQU1qQixhQU5pQixFQU9qQixhQVBpQixFQVFqQixZQVJpQixFQVNqQixtQkFUaUIsRUFVakIsV0FWaUIsRUFXakIsWUFYaUIsQ0FBakI7O0FBaUJBQyxPQUFPQyxnQkFBUCxDQUF3QixTQUF4QixFQUFtQyxVQUFTQyxDQUFULEVBQVk7QUFDM0NDLFVBQVFDLEdBQVIsQ0FBWSx5QkFBWjs7QUFFQTtBQUNBRixJQUFFRyxTQUFGOztBQUVDO0FBQ0FDLFNBQU9DLElBQVAsQ0FBWVQsU0FBWixFQUF1QlUsSUFBdkIsQ0FBNEIsVUFBU0MsS0FBVCxFQUFnQjs7QUFFM0M7QUFDSE4sWUFBUUMsR0FBUixDQUFZLGtDQUFaO0FBQ0EsV0FBT0ssTUFBTUMsTUFBTixDQUFhWCxVQUFiLENBQVA7QUFDRyxHQUxELENBSEQ7QUFVSCxDQWREOztBQWlCQUMsT0FBT0MsZ0JBQVAsQ0FBd0IsVUFBeEIsRUFBb0MsVUFBU0MsQ0FBVCxFQUFZO0FBQzVDQyxVQUFRQyxHQUFSLENBQVkseUJBQVo7O0FBRUFGLElBQUVHLFNBQUY7O0FBRUM7QUFDSEMsU0FBT0ssSUFBUCxHQUFjSCxJQUFkLENBQW1CLFVBQVNJLFVBQVQsRUFBcUI7QUFDdkMsV0FBT0MsUUFBUUMsR0FBUixDQUFZRixXQUFXRyxHQUFYLENBQWUsVUFBU0MsYUFBVCxFQUF3Qjs7QUFFekQ7QUFDQSxVQUFJQSxrQkFBa0JsQixTQUF0QixFQUFpQzs7QUFFaEM7QUFDQUssZ0JBQVFDLEdBQVIsQ0FBWSxtREFBWixFQUFpRVksYUFBakU7QUFDQSxlQUFPVixPQUFPVyxNQUFQLENBQWNELGFBQWQsQ0FBUDtBQUNBO0FBQ0QsS0FUa0IsQ0FBWixDQUFQO0FBVUEsR0FYRCxDQUhFO0FBaUJILENBcEJEOztBQXVCQWhCLE9BQU9DLGdCQUFQLENBQXdCLE9BQXhCLEVBQWlDLFVBQVNDLENBQVQsRUFBWTtBQUM1Q0MsVUFBUUMsR0FBUixDQUFZLHFCQUFaLEVBQW1DRixFQUFFZ0IsT0FBRixDQUFVQyxHQUE3Qzs7QUFFQTtBQUNBakIsSUFBRWtCLFdBQUY7O0FBRUM7QUFDQWQsU0FBT2UsS0FBUCxDQUFhbkIsRUFBRWdCLE9BQWYsRUFHRVYsSUFIRixDQUdPLFVBQVNjLFFBQVQsRUFBbUI7O0FBRXhCO0FBQ0EsUUFBS0EsUUFBTCxFQUFnQjtBQUNmbkIsY0FBUUMsR0FBUixDQUFZLDhCQUFaLEVBQTRDRixFQUFFZ0IsT0FBRixDQUFVQyxHQUF0RCxFQUEyREcsUUFBM0Q7QUFDQTtBQUNBLGFBQU9BLFFBQVA7QUFDQTs7QUFFRDs7QUFFQSxRQUFJQyxpQkFBaUJyQixFQUFFZ0IsT0FBRixDQUFVTSxLQUFWLEVBQXJCO0FBQ0EsV0FBT0MsTUFBTUYsY0FBTixFQUNMZixJQURLLENBQ0EsVUFBU2MsUUFBVCxFQUFtQjs7QUFFeEIsVUFBSyxDQUFDQSxRQUFOLEVBQWlCO0FBQ2hCbkIsZ0JBQVFDLEdBQVIsQ0FBWSx1Q0FBWjtBQUNBLGVBQU9rQixRQUFQO0FBQ0E7O0FBRUQsVUFBSUksa0JBQWtCSixTQUFTRSxLQUFULEVBQXRCOztBQUVBO0FBQ0FsQixhQUFPQyxJQUFQLENBQVlULFNBQVosRUFBdUJVLElBQXZCLENBQTRCLFVBQVNDLEtBQVQsRUFBZ0I7O0FBRTNDO0FBQ0FBLGNBQU1rQixHQUFOLENBQVV6QixFQUFFZ0IsT0FBWixFQUFxQlEsZUFBckI7QUFDQXZCLGdCQUFRQyxHQUFSLENBQVksK0JBQVosRUFBNkNGLEVBQUVnQixPQUFGLENBQVVDLEdBQXZEOztBQUVBO0FBQ0EsZUFBT0csUUFBUDtBQUVNLE9BVFA7QUFXQSxLQXRCSyxDQUFQO0FBMEJBLEdBekNGLENBSEQ7QUE4Q0EsQ0FsREQiLCJmaWxlIjoicmVnaXN0ZXJTZXJ2aWNlV29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gSW4gcHJvZHVjdGlvbiwgd2UgcmVnaXN0ZXIgYSBzZXJ2aWNlIHdvcmtlciB0byBzZXJ2ZSBhc3NldHMgZnJvbSBsb2NhbCBjYWNoZS5cblxuLy8gVGhpcyBsZXRzIHRoZSBhcHAgbG9hZCBmYXN0ZXIgb24gc3Vic2VxdWVudCB2aXNpdHMgaW4gcHJvZHVjdGlvbiwgYW5kIGdpdmVzXG4vLyBpdCBvZmZsaW5lIGNhcGFiaWxpdGllcy4gSG93ZXZlciwgaXQgYWxzbyBtZWFucyB0aGF0IGRldmVsb3BlcnMgKGFuZCB1c2Vycylcbi8vIHdpbGwgb25seSBzZWUgZGVwbG95ZWQgdXBkYXRlcyBvbiB0aGUgXCJOKzFcIiB2aXNpdCB0byBhIHBhZ2UsIHNpbmNlIHByZXZpb3VzbHlcbi8vIGNhY2hlZCByZXNvdXJjZXMgYXJlIHVwZGF0ZWQgaW4gdGhlIGJhY2tncm91bmQuXG5cbi8vIFRvIGxlYXJuIG1vcmUgYWJvdXQgdGhlIGJlbmVmaXRzIG9mIHRoaXMgbW9kZWwsIHJlYWQgaHR0cHM6Ly9nb28uZ2wvS3d2RE55LlxuLy8gVGhpcyBsaW5rIGFsc28gaW5jbHVkZXMgaW5zdHJ1Y3Rpb25zIG9uIG9wdGluZyBvdXQgb2YgdGhpcyBiZWhhdmlvci5cblxuLyogY29uc3QgaXNMb2NhbGhvc3QgPSBCb29sZWFuKFxuICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ2xvY2FsaG9zdCcgfHxcbiAgICAgIC8vIFs6OjFdIGlzIHRoZSBJUHY2IGxvY2FsaG9zdCBhZGRyZXNzLlxuICAgICAgd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lID09PSAnWzo6MV0nIHx8XG4gICAgICAvLyAxMjcuMC4wLjEvOCBpcyBjb25zaWRlcmVkIGxvY2FsaG9zdCBmb3IgSVB2NC5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5tYXRjaChcbiAgICAgICAgL14xMjcoPzpcXC4oPzoyNVswLTVdfDJbMC00XVswLTldfFswMV0/WzAtOV1bMC05XT8pKXszfSQvXG4gICAgICApXG4gICk7XG4gIFxuICBleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZWdpc3RlcigpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJyAmJiAnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgICAvLyBUaGUgVVJMIGNvbnN0cnVjdG9yIGlzIGF2YWlsYWJsZSBpbiBhbGwgYnJvd3NlcnMgdGhhdCBzdXBwb3J0IFNXLlxuICAgICAgY29uc3QgcHVibGljVXJsID0gbmV3IFVSTChwcm9jZXNzLmVudi5QVUJMSUNfVVJMLCB3aW5kb3cubG9jYXRpb24pO1xuICAgICAgaWYgKHB1YmxpY1VybC5vcmlnaW4gIT09IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pIHtcbiAgICAgICAgLy8gT3VyIHNlcnZpY2Ugd29ya2VyIHdvbid0IHdvcmsgaWYgUFVCTElDX1VSTCBpcyBvbiBhIGRpZmZlcmVudCBvcmlnaW5cbiAgICAgICAgLy8gZnJvbSB3aGF0IG91ciBwYWdlIGlzIHNlcnZlZCBvbi4gVGhpcyBtaWdodCBoYXBwZW4gaWYgYSBDRE4gaXMgdXNlZCB0b1xuICAgICAgICAvLyBzZXJ2ZSBhc3NldHM7IHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2tpbmN1YmF0b3IvY3JlYXRlLXJlYWN0LWFwcC9pc3N1ZXMvMjM3NFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gIFxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHN3VXJsID0gYCR7cHJvY2Vzcy5lbnYuUFVCTElDX1VSTH0vc2VydmljZS13b3JrZXIuanNgO1xuICBcbiAgICAgICAgaWYgKGlzTG9jYWxob3N0KSB7XG4gICAgICAgICAgLy8gVGhpcyBpcyBydW5uaW5nIG9uIGxvY2FsaG9zdC4gTGV0cyBjaGVjayBpZiBhIHNlcnZpY2Ugd29ya2VyIHN0aWxsIGV4aXN0cyBvciBub3QuXG4gICAgICAgICAgY2hlY2tWYWxpZFNlcnZpY2VXb3JrZXIoc3dVcmwpO1xuICBcbiAgICAgICAgICAvLyBBZGQgc29tZSBhZGRpdGlvbmFsIGxvZ2dpbmcgdG8gbG9jYWxob3N0LCBwb2ludGluZyBkZXZlbG9wZXJzIHRvIHRoZVxuICAgICAgICAgIC8vIHNlcnZpY2Ugd29ya2VyL1BXQSBkb2N1bWVudGF0aW9uLlxuICAgICAgICAgIG5hdmlnYXRvci5zZXJ2aWNlV29ya2VyLnJlYWR5LnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICdUaGlzIHdlYiBhcHAgaXMgYmVpbmcgc2VydmVkIGNhY2hlLWZpcnN0IGJ5IGEgc2VydmljZSAnICtcbiAgICAgICAgICAgICAgICAnd29ya2VyLiBUbyBsZWFybiBtb3JlLCB2aXNpdCBodHRwczovL2dvby5nbC9TQzdjZ1EnXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIElzIG5vdCBsb2NhbCBob3N0LiBKdXN0IHJlZ2lzdGVyIHNlcnZpY2Ugd29ya2VyXG4gICAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG4gIFxuICBmdW5jdGlvbiByZWdpc3RlclZhbGlkU1coc3dVcmwpIHtcbiAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlclxuICAgICAgLnJlZ2lzdGVyKHN3VXJsKVxuICAgICAgLnRoZW4ocmVnaXN0cmF0aW9uID0+IHtcbiAgICAgICAgcmVnaXN0cmF0aW9uLm9udXBkYXRlZm91bmQgPSAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgaW5zdGFsbGluZ1dvcmtlciA9IHJlZ2lzdHJhdGlvbi5pbnN0YWxsaW5nO1xuICAgICAgICAgIGluc3RhbGxpbmdXb3JrZXIub25zdGF0ZWNoYW5nZSA9ICgpID0+IHtcbiAgICAgICAgICAgIGlmIChpbnN0YWxsaW5nV29ya2VyLnN0YXRlID09PSAnaW5zdGFsbGVkJykge1xuICAgICAgICAgICAgICBpZiAobmF2aWdhdG9yLnNlcnZpY2VXb3JrZXIuY29udHJvbGxlcikge1xuICAgICAgICAgICAvLyBhdmFpbGFibGU7IHBsZWFzZSByZWZyZXNoLlwiIG1lc3NhZ2UgaW4geW91ciB3ZWIgYXBwLlxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdOZXcgY29udGVudCBpcyBhdmFpbGFibGU7IHBsZWFzZSByZWZyZXNoLicpO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFwiQ29udGVudCBpcyBjYWNoZWQgZm9yIG9mZmxpbmUgdXNlLlwiIG1lc3NhZ2UuXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0NvbnRlbnQgaXMgY2FjaGVkIGZvciBvZmZsaW5lIHVzZS4nKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG4gICAgICAgIH07XG4gICAgICB9KVxuICAgICAgLmNhdGNoKGVycm9yID0+IHtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZHVyaW5nIHNlcnZpY2Ugd29ya2VyIHJlZ2lzdHJhdGlvbjonLCBlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuICBcbiAgZnVuY3Rpb24gY2hlY2tWYWxpZFNlcnZpY2VXb3JrZXIoc3dVcmwpIHtcbiAgICAvLyBDaGVjayBpZiB0aGUgc2VydmljZSB3b3JrZXIgY2FuIGJlIGZvdW5kLiBJZiBpdCBjYW4ndCByZWxvYWQgdGhlIHBhZ2UuXG4gICAgZmV0Y2goc3dVcmwpXG4gICAgICAudGhlbihyZXNwb25zZSA9PiB7XG4gICAgICAgIC8vIEVuc3VyZSBzZXJ2aWNlIHdvcmtlciBleGlzdHMsIGFuZCB0aGF0IHdlIHJlYWxseSBhcmUgZ2V0dGluZyBhIEpTIGZpbGUuXG4gICAgICAgIGlmIChcbiAgICAgICAgICByZXNwb25zZS5zdGF0dXMgPT09IDQwNCB8fFxuICAgICAgICAgIHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKS5pbmRleE9mKCdqYXZhc2NyaXB0JykgPT09IC0xXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIE5vIHNlcnZpY2Ugd29ya2VyIGZvdW5kLiBQcm9iYWJseSBhIGRpZmZlcmVudCBhcHAuIFJlbG9hZCB0aGUgcGFnZS5cbiAgICAgICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgICAgICAgICByZWdpc3RyYXRpb24udW5yZWdpc3RlcigpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBTZXJ2aWNlIHdvcmtlciBmb3VuZC4gUHJvY2VlZCBhcyBub3JtYWwuXG4gICAgICAgICAgcmVnaXN0ZXJWYWxpZFNXKHN3VXJsKTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoKSA9PiB7XG4gICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICdObyBpbnRlcm5ldCBjb25uZWN0aW9uIGZvdW5kLiBBcHAgaXMgcnVubmluZyBpbiBvZmZsaW5lIG1vZGUuJ1xuICAgICAgICApO1xuICAgICAgfSk7XG4gIH1cbiAgXG4gIGV4cG9ydCBmdW5jdGlvbiB1bnJlZ2lzdGVyKCkge1xuICAgIGlmICgnc2VydmljZVdvcmtlcicgaW4gbmF2aWdhdG9yKSB7XG4gICAgICBuYXZpZ2F0b3Iuc2VydmljZVdvcmtlci5yZWFkeS50aGVuKHJlZ2lzdHJhdGlvbiA9PiB7XG4gICAgICAgIHJlZ2lzdHJhdGlvbi51bnJlZ2lzdGVyKCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH0qL1xuICBcblxuICAvKl9fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fX19fXyovXG5cblxuXG5cbi8qIF9fX19fX19fX19fX19fX19fX19fX19fX19fX19vayBfX19fX19fX19fX18qL1xuLy8gU2V0IGEgbmFtZSBmb3IgdGhlIGN1cnJlbnQgY2FjaGVcbmxldCBjYWNoZU5hbWUgPSAndjInOyBcblxuLy8gRGVmYXVsdCBmaWxlcyB0byBhbHdheXMgY2FjaGVcbmxldCBjYWNoZUZpbGVzID0gW1xuXHQnJyxcbicvJyxcbidwdWJsaWMvaW5kZXguaHRtbCcsXG4nLi9BcHAuanMnLFxuJy4vTWVudS5qcycsXG4nLi9Gb290ZXIuanMnLFxuJy4vSGVhZGVyLmpzJyxcbicuL2luZGV4LmpzJyxcbicuL01hcENvbnRhaW5lci5qcycsXG4nLi9hcHAuY3NzJyxcbicuL21lbnUuY3NzJyxcblxuXTtcblxuXG5cbmdsb2JhbC5hZGRFdmVudExpc3RlbmVyKCdpbnN0YWxsJywgZnVuY3Rpb24oZSkge1xuICAgIGNvbnNvbGUubG9nKCdTZXJ2aWNlV29ya2VyIEluc3RhbGxlZCcpO1xuXG4gICAgLy8gZS53YWl0VW50aWwgRGVsYXlzIHRoZSBldmVudCB1bnRpbCB0aGUgUHJvbWlzZSBpcyByZXNvbHZlZFxuICAgIGUud2FpdFVudGlsKFxuXG4gICAgXHQvLyBPcGVuIHRoZSBjYWNoZVxuXHQgICAgY2FjaGVzLm9wZW4oY2FjaGVOYW1lKS50aGVuKGZ1bmN0aW9uKGNhY2hlKSB7XG5cblx0ICAgIFx0Ly8gQWRkIGFsbCB0aGUgZGVmYXVsdCBmaWxlcyB0byB0aGUgY2FjaGVcblx0XHRcdGNvbnNvbGUubG9nKCdTZXJ2aWNlV29ya2VyIENhY2hpbmcgY2FjaGVGaWxlcycpO1xuXHRcdFx0cmV0dXJuIGNhY2hlLmFkZEFsbChjYWNoZUZpbGVzKTtcblx0ICAgIH0pXG5cdCk7XG59KTtcblxuXG5nbG9iYWwuYWRkRXZlbnRMaXN0ZW5lcignYWN0aXZhdGUnLCBmdW5jdGlvbihlKSB7XG4gICAgY29uc29sZS5sb2coJ1NlcnZpY2VXb3JrZXIgQWN0aXZhdGVkJyk7XG5cbiAgICBlLndhaXRVbnRpbChcblxuICAgIFx0Ly8gR2V0IGFsbCB0aGUgY2FjaGUga2V5c1xuXHRcdGNhY2hlcy5rZXlzKCkudGhlbihmdW5jdGlvbihjYWNoZU5hbWVzKSB7XG5cdFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwoY2FjaGVOYW1lcy5tYXAoZnVuY3Rpb24odGhpc0NhY2hlTmFtZSkge1xuXG5cdFx0XHRcdC8vIElmIGEgY2FjaGVkIGl0ZW0gaXMgc2F2ZWQgdW5kZXIgYSBwcmV2aW91cyBjYWNoZU5hbWVcblx0XHRcdFx0aWYgKHRoaXNDYWNoZU5hbWUgIT09IGNhY2hlTmFtZSkge1xuXG5cdFx0XHRcdFx0Ly8gRGVsZXRlIHRoYXQgY2FjaGVkIGZpbGVcblx0XHRcdFx0XHRjb25zb2xlLmxvZygnU2VydmljZVdvcmtlciBSZW1vdmluZyBDYWNoZWQgRmlsZXMgZnJvbSBDYWNoZSAtICcsIHRoaXNDYWNoZU5hbWUpO1xuXHRcdFx0XHRcdHJldHVybiBjYWNoZXMuZGVsZXRlKHRoaXNDYWNoZU5hbWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KSk7XG5cdFx0fSlcblx0KTtcblxufSk7XG5cblxuZ2xvYmFsLmFkZEV2ZW50TGlzdGVuZXIoJ2ZldGNoJywgZnVuY3Rpb24oZSkge1xuXHRjb25zb2xlLmxvZygnU2VydmljZVdvcmtlciBGZXRjaCcsIGUucmVxdWVzdC51cmwpO1xuXG5cdC8vIGUucmVzcG9uZFdpZHRoIFJlc3BvbmRzIHRvIHRoZSBmZXRjaCBldmVudFxuXHRlLnJlc3BvbmRXaXRoKFxuXG5cdFx0Ly8gQ2hlY2sgaW4gY2FjaGUgZm9yIHRoZSByZXF1ZXN0IGJlaW5nIG1hZGVcblx0XHRjYWNoZXMubWF0Y2goZS5yZXF1ZXN0KVxuXG5cblx0XHRcdC50aGVuKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG5cblx0XHRcdFx0Ly8gSWYgdGhlIHJlcXVlc3QgaXMgaW4gdGhlIGNhY2hlXG5cdFx0XHRcdGlmICggcmVzcG9uc2UgKSB7XG5cdFx0XHRcdFx0Y29uc29sZS5sb2coXCJTZXJ2aWNlV29ya2VyIEZvdW5kIGluIENhY2hlXCIsIGUucmVxdWVzdC51cmwsIHJlc3BvbnNlKTtcblx0XHRcdFx0XHQvLyBSZXR1cm4gdGhlIGNhY2hlZCB2ZXJzaW9uXG5cdFx0XHRcdFx0cmV0dXJuIHJlc3BvbnNlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gSWYgdGhlIHJlcXVlc3QgaXMgTk9UIGluIHRoZSBjYWNoZSwgZmV0Y2ggYW5kIGNhY2hlXG5cblx0XHRcdFx0bGV0IGNsb25lZFJlcXVlc3RzID0gZS5yZXF1ZXN0LmNsb25lKCk7XG5cdFx0XHRcdHJldHVybiBmZXRjaChjbG9uZWRSZXF1ZXN0cylcblx0XHRcdFx0XHQudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuXG5cdFx0XHRcdFx0XHRpZiAoICFyZXNwb25zZSApIHtcblx0XHRcdFx0XHRcdFx0Y29uc29sZS5sb2coXCJTZXJ2aWNlV29ya2VyIE5vIHJlc3BvbnNlIGZyb20gZmV0Y2ggXCIpXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0bGV0IGNsb25lZFJlc3BvbnNlcyA9IHJlc3BvbnNlLmNsb25lKCk7XG5cblx0XHRcdFx0XHRcdC8vICBPcGVuIHRoZSBjYWNoZVxuXHRcdFx0XHRcdFx0Y2FjaGVzLm9wZW4oY2FjaGVOYW1lKS50aGVuKGZ1bmN0aW9uKGNhY2hlKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gUHV0IHRoZSBmZXRjaGVkIHJlc3BvbnNlIGluIHRoZSBjYWNoZVxuXHRcdFx0XHRcdFx0XHRjYWNoZS5wdXQoZS5yZXF1ZXN0LCBjbG9uZWRSZXNwb25zZXMpO1xuXHRcdFx0XHRcdFx0XHRjb25zb2xlLmxvZygnU2VydmljZVdvcmtlciBOZXcgRGF0YSBDYWNoZWQnLCBlLnJlcXVlc3QudXJsKTtcblxuXHRcdFx0XHRcdFx0XHQvLyBSZXR1cm4gdGhlIHJlc3BvbnNlXG5cdFx0XHRcdFx0XHRcdHJldHVybiByZXNwb25zZTtcblx0XHRcdFxuXHRcdFx0XHQgICAgICAgIH0pO1xuXG5cdFx0XHRcdFx0fSlcblx0XHRcdFx0XHRcblxuXG5cdFx0XHR9KSBcblx0KTtcbn0pOyJdfQ==
})